/*
Copyright 2013, KISSY UI Library v1.40dev
MIT Licensed
build time: Aug 16 15:24
*/
/*
 Combined processedModules by KISSY Module Compiler: 

 date/picker/picker-tpl
 date/picker/render
 date/picker/month-panel/months-tpl
 date/picker/month-panel/month-panel-tpl
 date/picker/month-panel/render
 date/picker/year-panel/years-tpl
 date/picker/year-panel/year-panel-tpl
 date/picker/year-panel/render
 date/picker/decade-panel/decades-tpl
 date/picker/decade-panel/decade-panel-tpl
 date/picker/decade-panel/render
 date/picker/decade-panel/control
 date/picker/year-panel/control
 date/picker/month-panel/control
 date/picker/control
 date/picker
*/

/*
  Generated by kissy-tpl2mod.
*/
KISSY.add('date/picker/picker-tpl',
'<div class="{{getBaseCssClasses \'header\'}}">\n    <a id="ks-date-picker-previous-month-btn-{{id}}"\n       class="{{getBaseCssClasses \'prev-month-btn\'}}"\n       href="#"\n       role="button"\n       title="{{previousMonthLabel}}"\n       hidefocus="on">\n    </a>\n\n    <a class="{{getBaseCssClasses \'month-select\'}}"\n       role="button"\n       href="#"\n       hidefocus="on"\n       title="{{monthSelectLabel}}"\n       id="ks-date-picker-month-select-{{id}}">\n        <span id="ks-date-picker-month-select-content-{{id}}">{{monthYearLabel}}</span>\n        <span class="{{getBaseCssClasses \'month-select-arrow\'}}">x</span>\n    </a>\n\n    <a id="ks-date-picker-next-month-btn-{{id}}"\n       class="{{getBaseCssClasses \'next-month-btn\'}}"\n       href="#"\n       role="button"\n       title="{{nextMonthLabel}}"\n       hidefocus="on">\n    </a>\n</div>\n<div class="{{getBaseCssClasses \'body\'}}">\n    <table class="{{getBaseCssClasses \'table\'}}" cellspacing="0" role="grid">\n        <thead>\n        <tr role="row">\n            {{#each weekdays}}\n            <th role="columnheader" title="{{.}}" class="{{getBaseCssClasses \'column-header\'}}">\n                <span class="{{getBaseCssClasses \'column-header-inner\'}}">\n                    {{veryShortWeekdays[xindex]}}\n                </span>\n            </th>\n            {{/each}}\n        </tr>\n        </thead>\n        <tbody id="ks-date-picker-tbody-{{id}}">\n        {{{renderDates}}}\n        </tbody>\n    </table>\n</div>\n{{#if showToday}}\n<div class="{{getBaseCssClasses \'footer\'}}">\n    <a class="{{getBaseCssClasses \'today-btn\'}}"\n       role="button"\n       hidefocus="on"\n       href="#"\n       id="ks-date-picker-today-btn-{{id}}"\n       title="{{todayTimeLabel}}">{{todayLabel}}</a>\n</div>\n{{/if}}');
/**
 * render for year panel
 * @author yiminghe@gmail.com
 */
KISSY.add('date/picker/render', function (S, Control, GregorianCalendar, DateTimeFormat, PickerTpl) {
    var dateRowTplStart = '<tr role="row">';
    var dateRowTplEnd = '</tr>';
    var dateCellTpl = '<td role="gridcell" title="{title}" class="{cls}">{content}</td>';
    var dateTpl = '<a hidefocus="on" class="{cls}" href="#">{content}</a>';
    var DATE_ROW_COUNT = 6;
    var DATE_COL_COUNT = 7;

    function isSameDay(one, two) {
        return one.get(GregorianCalendar.YEAR) == two.get(GregorianCalendar.YEAR) &&
            one.get(GregorianCalendar.MONTH) == two.get(GregorianCalendar.MONTH) &&
            one.get(GregorianCalendar.DAY_OF_MONTH) == two.get(GregorianCalendar.DAY_OF_MONTH);
    }

    function beforeCurrentMonthYear(current, today) {
        if (current.get(GregorianCalendar.YEAR) < today.get(GregorianCalendar.YEAR)) {
            return 1;
        }
        return current.get(GregorianCalendar.YEAR) == today.get(GregorianCalendar.YEAR) &&
            current.get(GregorianCalendar.MONTH) < today.get(GregorianCalendar.MONTH);
    }

    function afterCurrentMonthYear(current, today) {
        if (current.get(GregorianCalendar.YEAR) > today.get(GregorianCalendar.YEAR)) {
            return 1;
        }
        return current.get(GregorianCalendar.YEAR) == today.get(GregorianCalendar.YEAR) &&
            current.get(GregorianCalendar.MONTH) > today.get(GregorianCalendar.MONTH);
    }

    function renderDatesCmd(){
        return this.view.renderDates();
    }

    return Control.getDefaultRender().extend({
        getMonthYearLabel: function () {
            var self = this;
            var control = self.control;
            var locale = control.get('locale');
            var value = control.get('value');
            var dateLocale = value.getLocale();
            return new DateTimeFormat(locale.monthYearFormat, dateLocale).format(value);
        },
        getTodayTimeLabel: function () {
            var self = this;
            var control = self.control;
            var locale = control.get('locale');
            var value = control.get('value');
            var dateLocale = value.getLocale();
            var today = value.clone();
            today.setTimeInMillis(S.now());
            return new DateTimeFormat(locale.dateFormat, dateLocale).format(today);
        },
        beforeCreateDom: function (renderData, childrenSelectors, renderCommands) {
            var self = this;
            var control = self.control;
            var locale = control.get('locale');
            var value = control.get('value');
            var dateLocale = value.getLocale();
            S.mix(childrenSelectors, {
                previousMonthBtn: '#ks-date-picker-previous-month-btn-{id}',
                monthSelectEl: '#ks-date-picker-month-select-{id}',
                monthSelectContentEl: '#ks-date-picker-month-select-content-{id}',
                nextMonthBtn: '#ks-date-picker-next-month-btn-{id}',
                todayBtnEl: '#ks-date-picker-today-btn-{id}',
                tbodyEl: '#ks-date-picker-tbody-{id}'
            });
            var veryShortWeekdays = [];
            var weekDays = [];
            var firstDayOfWeek = value.getFirstDayOfWeek();
            for (var i = 0; i < DATE_COL_COUNT; i++) {
                var index = (firstDayOfWeek + i) % DATE_COL_COUNT;
                veryShortWeekdays[i] = locale.veryShortWeekdays[index];
                weekDays[i] = dateLocale.weekdays[index];
            }
            S.mix(renderData, {
                monthYearLabel: self.getMonthYearLabel(),
                previousMonthLabel: locale.previousMonth,
                monthSelectLabel: locale.monthSelect,
                nextMonthLabel: locale.nextMonth,
                weekdays: weekDays,
                veryShortWeekdays: veryShortWeekdays,
                todayLabel: locale.today,
                todayTimeLabel: self.getTodayTimeLabel()
            });
            renderCommands.renderDates = renderDatesCmd;
        },
        renderDates: function () {
            var self = this,
                i, j,
                tables = [],
                current,
                control = self.control,
                locale = control.get('locale'),
                value = control.get('value'),
                today = value.clone(),
                cellClass = self.getBaseCssClass('cell'),
                dateClass = self.getBaseCssClass('date'),
                dateRender = control.get('dateRender'),
                disabledDate = control.get('disabledDate'),
                dateLocale = value.getLocale(),
                dateFormatter = new DateTimeFormat(locale.dateFormat, dateLocale),
                todayClass = self.getBaseCssClass('today'),
                selectedClass = self.getBaseCssClass('selected-day'),
                lastMonthDayClass = self.getBaseCssClass('last-month-cell'),
                nextMonthDayClass = self.getBaseCssClass('next-month-btn-day'),
                disabledClass = self.getBaseCssClass('disabled-cell');

            today.setTimeInMillis(S.now());
            var month1 = value.clone();

            month1.set(value.get(GregorianCalendar.YEAR), value.get(GregorianCalendar.MONTH), 1);
            var day = month1.get(GregorianCalendar.DAY_OF_WEEK);
            var lastMonthDiffDay = (day + 7 - value.getFirstDayOfWeek()) % 7;
            // calculate last month
            var lastMonth1 = month1.clone();
            lastMonth1.add(GregorianCalendar.DAY_OF_MONTH, -lastMonthDiffDay);
            var passed = 0;
            for (i = 0; i < DATE_ROW_COUNT; i++) {
                tables[i] = [];
                for (j = 0; j < DATE_COL_COUNT; j++) {
                    current = lastMonth1;
                    if (passed) {
                        current = current.clone();
                        current.add(GregorianCalendar.DAY_OF_MONTH, passed);
                    }
                    tables[i][j] = current;
                    passed++;
                }
            }
            var tableHtml = '';
            for (i = 0; i < DATE_ROW_COUNT; i++) {
                var rowHtml = dateRowTplStart;
                for (j = 0; j < DATE_COL_COUNT; j++) {
                    current = tables[i][j];
                    var cls = cellClass;

                    if (isSameDay(current, today)) {
                        cls += ' ' + todayClass;
                    }
                    if (isSameDay(current, value)) {
                        cls += ' ' + selectedClass;
                    }
                    if (beforeCurrentMonthYear(current, value)) {
                        cls += ' ' + lastMonthDayClass;
                    }
                    if (afterCurrentMonthYear(current, value)) {
                        cls += ' ' + nextMonthDayClass;
                    }
                    if (disabledDate && disabledDate(current, value)) {
                        cls += ' ' + disabledClass;
                    }

                    var dateHtml = '';
                    if (dateRender && (dateHtml = dateRender(current, value))) {
                    } else {
                        dateHtml = S.substitute(dateTpl, {
                            cls: dateClass,
                            content: current.get(GregorianCalendar.DAY_OF_MONTH)
                        });
                    }
                    rowHtml += S.substitute(dateCellTpl, {
                        cls: cls,
                        title: dateFormatter.format(current),
                        content: dateHtml
                    });
                }
                tableHtml += rowHtml + dateRowTplEnd;
            }
            control.dateTable = tables;
            return tableHtml;
        },
        // re render after current value change
        _onSetValue: function () {
            var control = this.control;
            var tbodyEl = control.get('tbodyEl');
            var monthSelectContentEl = control.get('monthSelectContentEl');
            var todayBtnEl = control.get('todayBtnEl');
            monthSelectContentEl.html(this.getMonthYearLabel());
            todayBtnEl.attr('title', this.getTodayTimeLabel());
            tbodyEl.html(this.renderDates());
        }
    }, {
        name: 'date-picker-render',
        ATTRS: {
            contentTpl: {
                value: PickerTpl
            }
        }
    });
}, {
    requires: ['component/control',
        'date/gregorian',
        'date/format',
        './picker-tpl']
});
/*
  Generated by kissy-tpl2mod.
*/
KISSY.add('date/picker/month-panel/months-tpl',
'{{#each months}}\n<tr role="row">\n    {{#each months[xindex]}}\n    <td role="gridcell"\n        title="{{title}}"\n        class="{{getBaseCssClasses \'cell\'}}\n        {{#if month===value}}\n        {{getBaseCssClasses \'selected-cell\'}}\n        {{/if}}\n        ">\n        <a hidefocus="on"\n           href="#"\n           class="{{getBaseCssClasses \'month\'}}">\n            {{content}}\n        </a>\n    </td>\n    {{/each}}\n</tr>\n{{/each}}');
/*
  Generated by kissy-tpl2mod.
*/
KISSY.add('date/picker/month-panel/month-panel-tpl',
'<div class="{{getBaseCssClasses \'header\'}}">\n    <a id="ks-date-picker-month-panel-previous-year-btn-{{id}}"\n       class="{{getBaseCssClasses \'prev-year-btn\'}}"\n       href="#"\n       role="button"\n       title="{{previousYearLabel}}"\n       hidefocus="on">\n    </a>\n\n\n        <a class="{{getBaseCssClasses \'year-select\'}}"\n           role="button"\n           href="#"\n           hidefocus="on"\n           title="{{yearSelectLabel}}"\n           id="ks-date-picker-month-panel-year-select-{{id}}">\n            <span id="ks-date-picker-month-panel-year-select-content-{{id}}">{{year}}</span>\n            <span class="{{getBaseCssClasses \'year-select-arrow\'}}">x</span>\n        </a>\n\n    <a id="ks-date-picker-month-panel-next-year-btn-{{id}}"\n       class="{{getBaseCssClasses \'next-year-btn\'}}"\n       href="#"\n       role="button"\n       title="{{nextYearLabel}}"\n       hidefocus="on">\n    </a>\n</div>\n<div class="{{getBaseCssClasses \'body\'}}">\n    <table class="{{getBaseCssClasses \'table\'}}" cellspacing="0" role="grid">\n        <tbody id="ks-date-picker-month-panel-tbody-{{id}}">\n        {{{include "date/picker/month-panel/months-tpl"}}}\n        </tbody>\n    </table>\n</div>');
/**
 * render for month panel
 * @author yiminghe@gmail.com
 */
KISSY.add('date/picker/month-panel/render', function (S, Control, GregorianCalendar, DateFormat, MonthsTpl, MonthPanelTpl) {
    function prepareMonths(control) {
        var value = control.get('value');
        var currentMonth = value.get(GregorianCalendar.MONTH);
        var current = value.clone();
        var locale = control.get('locale');
        var monthYearFormat = locale.monthYearFormat;
        var dateLocale = value.getLocale();
        var dateFormatter = new DateFormat(monthYearFormat, dateLocale);
        var months = [];
        var shortMonths = dateLocale.shortMonths;
        var index = 0;
        for (var i = 0; i < 3; i++) {
            months[i] = [];
            for (var j = 0; j < 4; j++) {
                current.set(GregorianCalendar.MONTH, index);
                months[i][j] = {
                    value:index,
                    content: shortMonths[index],
                    title: dateFormatter.format(current)
                };
                index++;
            }
        }
        S.mix(control.view.renderData,{
            months:months,
            year: value.get(GregorianCalendar.YEAR),
            month:currentMonth
        });
        control.months = months;
        return months;
    }

    return Control.getDefaultRender().extend({
        beforeCreateDom: function (renderData, childrenSelectors) {
            var control = this.control;
            var locale = control.get('locale');
            S.mix(renderData, {
                yearSelectLabel: locale.yearSelect,
                previousYearLabel: locale.previousYear,
                nextYearLabel: locale.nextYear
            });
            S.mix(childrenSelectors, {
                tbodyEl: '#ks-date-picker-month-panel-tbody-{id}',
                previousYearBtn: '#ks-date-picker-month-panel-previous-year-btn-{id}',
                yearSelectEl: '#ks-date-picker-month-panel-year-select-{id}',
                yearSelectContentEl: '#ks-date-picker-month-panel-year-select-content-{id}',
                nextYearBtn: '#ks-date-picker-month-panel-next-year-btn-{id}'
            });
            
            prepareMonths(control);
        },

        _onSetValue: function (value) {
            var control = this.control;
            prepareMonths(control);
            control.get('tbodyEl').html(this.renderTpl(MonthsTpl));
            control.get('yearSelectContentEl').html(value.get(GregorianCalendar.YEAR));
        }
    }, {
        ATTRS: {
            contentTpl: {
                value: MonthPanelTpl
            }
        }
    });
}, {
    requires: ['component/control',
        'date/gregorian',
        'date/format',
        './months-tpl',
        './month-panel-tpl']
});
/*
  Generated by kissy-tpl2mod.
*/
KISSY.add('date/picker/year-panel/years-tpl',
'{{#each years}}\n<tr role="row">\n    {{#each years[xindex]}}\n    <td role="gridcell"\n        title="{{title}}"\n        class="{{getBaseCssClasses \'cell\'}}\n        {{#if content===year}}\n         {{getBaseCssClasses \'selected-cell\'}}\n        {{/if}}\n        {{#if content<startYear}}\n         {{getBaseCssClasses \'last-decade-cell\'}}\n        {{/if}}\n        {{#if content>endYear}}\n         {{getBaseCssClasses \'next-decade-cell\'}}\n        {{/if}}\n        ">\n        <a hidefocus="on"\n           href="#"\n           class="{{getBaseCssClasses \'year\'}}">\n            {{content}}\n        </a>\n    </td>\n    {{/each}}\n</tr>\n{{/each}}');
/*
  Generated by kissy-tpl2mod.
*/
KISSY.add('date/picker/year-panel/year-panel-tpl',
'<div class="{{getBaseCssClasses \'header\'}}">\n    <a id="ks-date-picker-year-panel-previous-decade-btn-{{id}}"\n       class="{{getBaseCssClasses \'prev-decade-btn\'}}"\n       href="#"\n       role="button"\n       title="{{previousDecadeLabel}}"\n       hidefocus="on">\n    </a>\n\n    <a class="{{getBaseCssClasses \'decade-select\'}}"\n       role="button"\n       href="#"\n       hidefocus="on"\n       title="{{decadeSelectLabel}}"\n       id="ks-date-picker-year-panel-decade-select-{{id}}">\n            <span id="ks-date-picker-year-panel-decade-select-content-{{id}}">\n                {{startYear}}-{{endYear}}\n            </span>\n        <span class="{{getBaseCssClasses \'decade-select-arrow\'}}">x</span>\n    </a>\n\n    <a id="ks-date-picker-year-panel-next-decade-btn-{{id}}"\n       class="{{getBaseCssClasses \'next-decade-btn\'}}"\n       href="#"\n       role="button"\n       title="{{nextDecadeLabel}}"\n       hidefocus="on">\n    </a>\n</div>\n<div class="{{getBaseCssClasses \'body\'}}">\n    <table class="{{getBaseCssClasses \'table\'}}" cellspacing="0" role="grid">\n        <tbody id="ks-date-picker-year-panel-tbody-{{id}}">\n        {{{include "date/picker/year-panel/years-tpl"}}}\n        </tbody>\n    </table>\n</div>');
/**
 * render for year-panel
 * @author yiminghe@gmail.com
 */
KISSY.add('date/picker/year-panel/render', function (S, Control, GregorianCalendar, DateFormat, YearsTpl, YearPanelTpl) {
    function prepareYears(control) {
        var value = control.get('value');
        var currentYear = value.get(GregorianCalendar.YEAR);
        var startYear = parseInt(currentYear / 10) * 10;
        var preYear = startYear - 1;
        var current = value.clone();
        var locale = control.get('locale');
        var yearFormat = locale.yearFormat;
        var dateLocale = value.getLocale();
        var dateFormatter = new DateFormat(yearFormat, dateLocale);
        var years = [];
        var index = 0;
        for (var i = 0; i < 3; i++) {
            years[i] = [];
            for (var j = 0; j < 4; j++) {
                current.set(GregorianCalendar.YEAR, preYear + index);
                years[i][j] = {
                    content: preYear + index,
                    title: dateFormatter.format(current)
                };
                index++;
            }
        }
        control.years = years;
        return years;
    }

    return Control.getDefaultRender().extend({
        beforeCreateDom: function (renderData, childrenSelectors) {
            var control = this.control;
            var value = control.get('value');
            var currentYear = value.get(GregorianCalendar.YEAR);
            var startYear = parseInt(currentYear / 10) * 10;
            var endYear = startYear + 9;
            var locale = control.get('locale');
            S.mix(renderData, {
                decadeSelectLabel: locale.decadeSelect,
                years: prepareYears(control),
                startYear: startYear,
                endYear: endYear,
                year: value.get(GregorianCalendar.YEAR),
                previousDecadeLabel: locale.previousDecade,
                nextDecadeLabel: locale.nextDecade
            });
            S.mix(childrenSelectors, {
                tbodyEl: '#ks-date-picker-year-panel-tbody-{id}',
                previousDecadeBtn: '#ks-date-picker-year-panel-previous-decade-btn-{id}',
                decadeSelectEl: '#ks-date-picker-year-panel-decade-select-{id}',
                decadeSelectContentEl: '#ks-date-picker-year-panel-decade-select-content-{id}',
                nextDecadeBtn: '#ks-date-picker-year-panel-next-decade-btn-{id}'
            });
        },

        _onSetValue: function (value) {
            var control = this.control;
            var currentYear = value.get(GregorianCalendar.YEAR);
            var startYear = parseInt(currentYear / 10) * 10;
            var endYear = startYear + 9;
            S.mix(this.renderData, {
                startYear:startYear,
                endYear:endYear,
                years: prepareYears(control),
                year: value.get(GregorianCalendar.YEAR)
            });
            control.get('tbodyEl').html(this.renderTpl(YearsTpl));
            control.get('decadeSelectContentEl').html(startYear+'-'+endYear);
        }
    }, {
        ATTRS: {
            contentTpl: {
                value: YearPanelTpl
            }
        }
    });
}, {
    requires: ['component/control',
        'date/gregorian',
        'date/format',
        './years-tpl',
        './year-panel-tpl']
});
/*
  Generated by kissy-tpl2mod.
*/
KISSY.add('date/picker/decade-panel/decades-tpl',
'{{#each decades}}\n<tr role="row">\n    {{#each decades[xindex]}}\n    <td role="gridcell"\n        class="{{getBaseCssClasses \'cell\'}}\n        {{#if startDecade<=year&&year<=endDecade}}\n         {{getBaseCssClasses \'selected-cell\'}}\n        {{/if}}\n        {{#if startDecade<startYear}}\n         {{getBaseCssClasses \'last-century-cell\'}}\n        {{/if}}\n        {{#if endDecade>endYear}}\n         {{getBaseCssClasses \'next-century-cell\'}}\n        {{/if}}\n        ">\n        <a hidefocus="on"\n           href="#"\n           class="{{getBaseCssClasses \'decade\'}}">\n            {{startDecade}}-{{endDecade}}\n        </a>\n    </td>\n    {{/each}}\n</tr>\n{{/each}}');
/*
  Generated by kissy-tpl2mod.
*/
KISSY.add('date/picker/decade-panel/decade-panel-tpl',
'<div class="{{getBaseCssClasses \'header\'}}">\n    <a id="ks-date-picker-decade-panel-previous-century-btn-{{id}}"\n       class="{{getBaseCssClasses \'prev-century-btn\'}}"\n       href="#"\n       role="button"\n       title="{{previousCenturyLabel}}"\n       hidefocus="on">\n    </a>\n    <div class="{{getBaseCssClasses \'century\'}}"\n         id="ks-date-picker-decade-panel-century-{{id}}">\n                {{startYear}}-{{endYear}}\n    </div>\n    <a id="ks-date-picker-decade-panel-next-century-btn-{{id}}"\n       class="{{getBaseCssClasses \'next-century-btn\'}}"\n       href="#"\n       role="button"\n       title="{{nextCenturyLabel}}"\n       hidefocus="on">\n    </a>\n</div>\n<div class="{{getBaseCssClasses \'body\'}}">\n    <table class="{{getBaseCssClasses \'table\'}}" cellspacing="0" role="grid">\n        <tbody id="ks-date-picker-decade-panel-tbody-{{id}}">\n        {{{include "date/picker/decade-panel/decades-tpl"}}}\n        </tbody>\n    </table>\n</div>');
/**
 * render for decade panel
 * @author yiminghe@gmail.com
 */
KISSY.add('date/picker/decade-panel/render', function (S, Control, GregorianCalendar, DateFormat, MonthsTpl, DecadePanelTpl) {
    function prepareYears(control, view) {
        var value = control.get('value');
        var currentYear = value.get(GregorianCalendar.YEAR);
        var startYear = parseInt(currentYear / 100) * 100;
        var preYear = startYear - 10;
        var endYear = startYear + 99;
        var locale = control.get('locale');
        var decades = [];
        var index = 0;
        for (var i = 0; i < 3; i++) {
            decades[i] = [];
            for (var j = 0; j < 4; j++) {
                decades[i][j] = {
                    startDecade: preYear + index * 10,
                    endDecade: preYear + index * 10 + 9
                };
                index++;
            }
        }
        control.decades = decades;
        S.mix(view.renderData, {
            startYear: startYear,
            endYear: endYear,
            year: currentYear,
            decades: decades
        });
    }

    return Control.getDefaultRender().extend({
        beforeCreateDom: function (renderData, childrenSelectors) {
            var control = this.control;
            var value = control.get('value');
            var locale = control.get('locale');
            prepareYears(control, this);
            S.mix(renderData, {
                previousCenturyLabel: locale.previousCentury,
                nextCenturyLabel: locale.nextCentury
            });
            S.mix(childrenSelectors, {
                tbodyEl: '#ks-date-picker-decade-panel-tbody-{id}',
                previousCenturyBtn: '#ks-date-picker-decade-panel-previous-century-btn-{id}',
                centuryEl: '#ks-date-picker-decade-panel-century-{id}',
                nextCenturyBtn: '#ks-date-picker-decade-panel-next-century-btn-{id}'
            });
        },

        _onSetValue: function () {
            var control = this.control;
            prepareYears(control, this);
            var startYear = this.renderData.startYear;
            var endYear = this.renderData.endYear;
            control.get('tbodyEl').html(this.renderTpl(MonthsTpl));
            control.get('centuryEl').html(startYear + '-' + endYear);
        }
    }, {
        ATTRS: {
            contentTpl: {
                value: DecadePanelTpl
            }
        }
    });
}, {
    requires: ['component/control',
        'date/gregorian',
        'date/format',
        './decades-tpl',
        './decade-panel-tpl']
});
/**
 * decade panel for date picker
 * @author yiminghe@gmail.com
 */
KISSY.add('date/picker/decade-panel/control', function (S, Node, GregorianCalendar, Control, CenturyPanelRender) {
    var tap = Node.Gesture.tap;
    var $ = Node.all;

    function goYear(self, direction) {
        var next = self.get('value').clone();
        next.add(GregorianCalendar.YEAR, direction);
        self.set('value', next);
    }

    function nextCentury(e) {
        e.preventDefault();
        goYear(this, 100);
    }

    function prevCentury(e) {
        e.preventDefault();
        goYear(this, -100);
    }

    function chooseCell(e) {
        e.preventDefault();
        var td = $(e.currentTarget);
        var tr = td.parent();
        var tdIndex = td.index();
        var trIndex = tr.index();
        var value = this.get('value').clone();
        var y = value.get(GregorianCalendar.YEAR) % 10;
        value.set(GregorianCalendar.YEAR, this.decades[trIndex][tdIndex].startDecade + y);
        this.set('value', value);
        this.fire('select', {
            value: value
        });
    }

    return Control.extend({
        bindUI: function () {
            var self = this;
            self.get('nextCenturyBtn').on(tap, nextCentury, self);
            self.get('previousCenturyBtn').on(tap, prevCentury, self);
            self.get('tbodyEl').delegate(
                tap,
                '.' + self.view.getBaseCssClass('cell'),
                chooseCell,
                self
            );
        }
    }, {
        xclass: 'date-picker-decade-panel',
        ATTRS: {
            value: {
                view: 1
            },
            xrender: {
                value: CenturyPanelRender
            }
        }
    });
}, {
    requires: ['node', 'date/gregorian', 'component/control', './render']
});
/**
 * month select for date picker
 * @author yiminghe@gmail.com
 */
KISSY.add('date/picker/year-panel/control', function (S, Node, GregorianCalendar, Control, DecadePanelRender, DecadePanel) {
    var tap = Node.Gesture.tap;
    var $ = Node.all;

    function goYear(self, direction) {
        var next = self.get('value').clone();
        next.add(GregorianCalendar.YEAR, direction);
        self.set('value', next);
    }

    function nextDecade(e) {
        e.preventDefault();
        goYear(this, 10);
    }

    function prevDecade(e) {
        e.preventDefault();
        goYear(this, -10);
    }

    function chooseCell(e) {
        e.preventDefault();
        var td = $(e.currentTarget);
        var tr = td.parent();
        var tdIndex = td.index();
        var trIndex = tr.index();
        var value = this.get('value').clone();
        value.set(GregorianCalendar.YEAR, this.years[trIndex][tdIndex].content);
        this.set('value', value);
        this.fire('select', {
            value: value
        });
    }

    function showDecadePanel(e) {
        e.preventDefault();
        var decadePanel = this.get('decadePanel');
        decadePanel.set('value', this.get('value'));
        decadePanel.show();
    }

    function setUpDecadePanel() {
        var self = this;
        var decadePanel = new DecadePanel({
            locale: this.get('locale'),
            render: self.get('el')
        });
        decadePanel.on('select', onDecadePanelSelect, self);
        return decadePanel;
    }

    function onDecadePanelSelect(e) {
        this.set('value', e.value);
        this.get('decadePanel').hide();
    }

    return Control.extend({
        bindUI: function () {
            var self = this;
            self.get('nextDecadeBtn').on(tap, nextDecade, self);
            self.get('previousDecadeBtn').on(tap, prevDecade, self);
            self.get('tbodyEl').delegate(
                tap,
                '.' + self.view.getBaseCssClass('cell'),
                chooseCell,
                self
            );
            self.get('decadeSelectEl').on(tap, showDecadePanel, self);
        }
    }, {
        xclass: 'date-picker-year-panel',
        ATTRS: {
            value: {
                view: 1
            },
            decadePanel: {
                valueFn: setUpDecadePanel
            },
            xrender: {
                value: DecadePanelRender
            }
        }
    });
}, {
    requires: [
        'node',
        'date/gregorian',
        'component/control',
        './render',
        '../decade-panel/control']
});
/**
 * month panel for date picker
 * @author yiminghe@gmail.com
 */
KISSY.add('date/picker/month-panel/control',function(S,
                                                     Node,
                                                     GregorianCalendar,
                                                     Control,
                                                     MonthPanelRender,
    YearPanel){
    var tap = Node.Gesture.tap;
    var $ = Node.all;

    function goYear(self, direction) {
        var next = self.get('value').clone();
        next.add(GregorianCalendar.YEAR, direction);
        self.set('value',next)
    }

    function nextYear(e) {
        e.preventDefault();
        goYear(this, 1);
    }

    function prevYear(e) {
        e.preventDefault();
        goYear(this, -1);
    }

    function chooseCell(e) {
        e.preventDefault();
        var td = $(e.currentTarget);
        var tr = td.parent();
        var tdIndex = td.index();
        var trIndex = tr.index();
        var value=this.get('value').clone();
        value.set(GregorianCalendar.MONTH,trIndex*4+tdIndex);
        this.fire('select',{
            value:value
        });
    }
    
    function showYearPanel(e) {
        e.preventDefault();
        var yearPanel = this.get('yearPanel');
        yearPanel.set('value', this.get('value'));
        yearPanel.show();
    }

    function setUpYearPanel() {
        var self = this;
        var yearPanel = new YearPanel({
            locale:this.get('locale'),
            render: self.get('el')
        });
        yearPanel.on('select', onYearPanelSelect, self);
        return yearPanel;
    }

    function onYearPanelSelect(e) {
        this.set('value', e.value);
        this.get('yearPanel').hide();
    }

    return Control.extend({
        bindUI: function () {
            var self = this;
            self.get('nextYearBtn').on(tap, nextYear, self);
            self.get('previousYearBtn').on(tap, prevYear, self);
            self.get('tbodyEl').delegate(
                tap,
                '.' + self.view.getBaseCssClass('cell'),
                chooseCell,
                self
            );
            self.get('yearSelectEl').on(tap,showYearPanel,self);
        }
    },{
        xclass:'date-picker-month-panel',
        ATTRS:{
            value:{
                view:1
            },
            yearPanel: {
                valueFn: setUpYearPanel
            },
            xrender:{
                value:MonthPanelRender
            }
        }
    })
},{
    requires:[
        'node',
        'date/gregorian',
        'component/control',
        './render',
        '../year-panel/control'
    ]
});
/**
 * year panel for date picker
 * @author yiminghe@gmail.com
 */
KISSY.add('date/picker/control', function (S, Node, GregorianCalendar, locale, Control, PickerRender, MonthPanel) {
    var tap = Node.Gesture.tap;
    var $ = Node.all;

    function goMonth(self, direction) {
        var next = self.get('value').clone();
        next.add(GregorianCalendar.MONTH, direction);
        self.set('value', next);
    }

    function nextMonth(e) {
        e.preventDefault();
        goMonth(this, 1);
    }

    function prevMonth(e) {
        e.preventDefault();
        goMonth(this, -1);
    }

    function chooseCell(e) {
        e.preventDefault();
        var td = $(e.currentTarget);
        if (td.hasClass(this.view.getBaseCssClass('disabled-cell'))) {
            return;
        }
        var tr = td.parent();
        var tdIndex = td.index();
        var trIndex = tr.index();
        this.set('value', this.dateTable[trIndex][tdIndex]);
    }

    function showMonthPanel(e) {
        e.preventDefault();
        var monthPanel = this.get('monthPanel');
        monthPanel.set('value', this.get('value'));
        monthPanel.show();
    }

    function setUpMonthPanel() {
        var self = this;
        var monthPanel = new MonthPanel({
            locale: this.get('locale'),
            render: self.get('el')
        });
        monthPanel.on('select', onMonthPanelSelect, self);
        return monthPanel;
    }

    function onMonthPanelSelect(e) {
        this.set('value', e.value);
        this.get('monthPanel').hide();
    }

    function chooseToday(e) {
        e.preventDefault();
        var today = this.get('value').clone();
        today.setTimeInMillis(S.now());
        this.set('value', today);
    }

    return Control.extend({
        bindUI: function () {
            var self = this;
            self.get('nextMonthBtn').on(tap, nextMonth, self);
            self.get('previousMonthBtn').on(tap, prevMonth, self);
            self.get('tbodyEl').delegate(
                tap,
                '.' + self.view.getBaseCssClass('cell'),
                chooseCell,
                self
            );
            self.get('monthSelectEl').on(tap, showMonthPanel, self);
            self.get('todayBtnEl').on(tap, chooseToday, self);
        }
    }, {
        xclass: 'date-picker',
        ATTRS: {
            value: {
                view: 1,
                valueFn: function () {
                    var date = new GregorianCalendar();
                    date.setTimeInMillis(S.now());
                    return date;
                }
            },
            previousMonthBtn: {},
            monthSelectEl: {},
            monthPanel: {
                valueFn: setUpMonthPanel
            },
            nextMonthBtn: {},
            tbodyEl: {},
            todayBtnEl: {},
            dateRender: {},
            disabledDate: {},
            locale: {
                value: locale
            },
            showToday: {
                view: 1,
                value: true
            },
            xrender: {
                value: PickerRender
            }
        }
    });
}, {
    requires: [
        'node',
        'date/gregorian',
        'i18n!date/picker',
        'component/control',
        './render',
        './month-panel/control'
    ]
});
/**
 * date picker ui
 * @author yiminghe@gmail.com
 */
KISSY.add('date/picker',function(S,DatePicker){
    return DatePicker;
},{
    requires:['./picker/control']
});

